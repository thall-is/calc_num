# -*- coding: utf-8 -*-
"""rk3&4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UmfdUxIhom8Z8si36oSu3DJDotEXGFmn
"""

import numpy as np
import plotly.graph_objects as go

def runge_kutta_3rd_order(f, y0, x0, xf, h):
    """
    Método de Runge-Kutta de 3ª ordem para resolver EDOs
    f: função da EDO (dy/dx = f(x, y))
    y0: condição inicial
    x0: valor inicial de x
    xf: valor final de x
    h: passo
    """
    x = np.arange(x0, xf + h, h)
    y = np.zeros(len(x))
    y[0] = y0

    for i in range(1, len(x)):
        k1 = f(x[i-1], y[i-1])
        k2 = f(x[i-1] + 0.5*h, y[i-1] + 0.5*h*k1)
        k3 = f(x[i-1] + h, y[i-1] - h*k1 + 2*h*k2)
        y[i] = y[i-1] + (1/6)*(k1 + 4*k2 + k3)*h

    return x, y

def runge_kutta_4th_order(f, y0, x0, xf, h):
    """
    Método de Runge-Kutta de 4ª ordem para resolver EDOs
    f: função da EDO (dy/dx = f(x, y))
    y0: condição inicial
    x0: valor inicial de x
    xf: valor final de x
    h: passo
    """
    x = np.arange(x0, xf + h, h)
    y = np.zeros(len(x))
    y[0] = y0

    for i in range(1, len(x)):
        k1 = f(x[i-1], y[i-1])
        k2 = f(x[i-1] + 0.5*h, y[i-1] + 0.5*h*k1)
        k3 = f(x[i-1] + 0.5*h, y[i-1] + 0.5*h*k2)
        k4 = f(x[i-1] + h, y[i-1] + h*k3)
        y[i] = y[i-1] + (1/6)*(k1 + 2*k2 + 2*k3 + k4)*h

    return x, y

def print_results(x, y, method_name):
    print(f"\nResultados - {method_name}")
    print("{:<20} {:<25}".format("x", "y"))
    for xi, yi in zip(x, y):
        print("{:<20.16f} {:<25.16f}".format(xi, yi))

# Entradas pelo teclado
func_str = input("Digite a função dy/dx = f(x, y):\nExemplo: 'x - y'\n>>> ")
y0 = float(input("Digite a condição inicial y0:\n>>> "))
x0 = float(input("Digite o valor inicial x0:\n>>> "))
xf = float(input("Digite o valor final xf:\n>>> "))
h = float(input("Digite o passo h:\n>>> "))

# Converte a string da função para uma função Python
f = eval(f"lambda x, y: {func_str}")

# Resolver a EDO usando o método de Runge-Kutta de 3ª ordem
x_3rd, y_3rd = runge_kutta_3rd_order(f, y0, x0, xf, h)

# Resolver a EDO usando o método de Runge-Kutta de 4ª ordem
x_4th, y_4th = runge_kutta_4th_order(f, y0, x0, xf, h)

# Imprimir os resultados dos métodos numéricos com maior precisão
print_results(x_3rd, y_3rd, "Runge-Kutta 3ª Ordem")
print_results(x_4th, y_4th, "Runge-Kutta 4ª Ordem")

# Verificar se o usuário conhece a solução analítica
conhece_solucao_analitica = input("Você conhece a solução analítica? (sim/não):\n>>> ").strip().lower()

if conhece_solucao_analitica == "sim":
    solucao_analitica_str = input("Digite a solução analítica y = f(x):\nExemplo: 'x / 2 + 2 / x'\n>>> ")
    # Converte a string da solução analítica para uma função Python
    solucao_analitica = eval(f"lambda x: {solucao_analitica_str}")

    # Calcular e imprimir a solução analítica com maior precisão
    x_exact = np.arange(x0, xf + h, h)
    y_exact = solucao_analitica(x_exact)
    print("\nResultados - Solução Analítica")
    print("{:<20} {:<25}".format("x", "y"))
    for xi, yi in zip(x_exact, y_exact):
        print("{:<20.16f} {:<25.16f}".format(xi, yi))

    # Plotar a solução analítica junto com as soluções numéricas
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x_3rd, y=y_3rd, mode='lines', name='Runge-Kutta 3ª Ordem'))
    fig.add_trace(go.Scatter(x=x_4th, y=y_4th, mode='lines', name='Runge-Kutta 4ª Ordem'))
    fig.add_trace(go.Scatter(x=x_exact, y=y_exact, mode='lines', name='Solução Exata', line=dict(dash='dash')))
else:
    print("Nenhuma solução analítica fornecida.")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x_3rd, y=y_3rd, mode='lines', name='Runge-Kutta 3ª Ordem'))
    fig.add_trace(go.Scatter(x=x_4th, y=y_4th, mode='lines', name='Runge-Kutta 4ª Ordem'))

# Configurações do gráfico
fig.update_layout(
    title='Resultados dos Métodos Numéricos',
    xaxis_title='x',
    yaxis_title='y',
    autosize=False,
    width=800,
    height=600
)

# Mostrar o gráfico interativo
fig.show()